
%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>
#include <vector>
#include "classes/naredba.hpp"

#define YYDEBUG 1

std::map <std::string, int> id_map;


void yyerror(const char *str) {
    extern int yylineno;

    std::cerr<<"Pojavila se greska: "<< str<<"  u liniji: "<< yylineno<<std::endl;
    exit(EXIT_FAILURE);
} 

map<std::string, int> tablica;

int yylex();

%}
%union{
    std::string *s;
    int x;
    Naredba *n;
    Izraz *i;
    vector<Naredba*> *v;
}

%token  CEO VRATI STAMPAJ

%token<s> ID
%token<x> NUM
%token<bul> AKO ONDA INACE

%type <i> E

%type <n> naredba blok uslov dodela
%type <v> niz_naredbi


%start S


%right '='

%left '<''>' 
%left '+' '-'
%left '*' '/'
%left UMINUS 

%nonassoc AKO ONDA
%nonassoc INACE

%%
S: ID '(' ')' blok                          { $4 -> izvrsi();  delete $4; }
    ;

blok:           '{' niz_naredbi ';''}'      { $$ = new Blok(*$2);  delete $2; }
                ;


niz_naredbi:    niz_naredbi ';' naredba     { $$ = $1;  $$->push_back($3); }
                | naredba                   { $$ = new vector<Naredba*>();  $$->push_back($1); }
                ;
            
naredba:        dodela                      { $$=$1; }
                | uslov                     { $$=$1; }
                | STAMPAJ '(' E ')'         { $$ = new IspisIzraza($3);  delete $3; }
                | blok                      { $$ = $1; }
                | deklaracija_var
                ;
dodela:         ID '=' E                    { $$ = new Dodela(*$1, $3);  delete $1;  delete $3;}
                ;
deklaracija_var: CEO lista_id
                ;
lista_id:       lista_id ',' ID
                | ID
                ;
uslov:          AKO '(' E ')' ONDA blok                  { $$ = new AkoJeOnda($3, $6);  delete $3; }
                | AKO '(' E ')' ONDA blok INACE blok     { $$ = new AkoJeOndaInace($3, $6, $8);  delete $3; }
                ;
              
        
E :             E '+' E	                {  $$= new Zbir($1,$3); delete $1; delete $3;    }
                | E '-' E	            {  $$= new Razlika($1,$3); delete $1; delete $3; }
                | E '*' E           	{  $$= new Proizvod($1,$3); delete $1; delete $3;}
                | E '/' E	            {  $$= new Kolicnik($1,$3); delete $1; delete $3;}
                | '(' E ')'	            {  $$ = $2; }
                | '-' E    %prec UMINUS	{ /*TODO*/ }
                | NUM		            {  $$ = new Konstanta($1); }
                | ID                    {  $$ = new Promenljiva(*$1); delete $1;}
                | E '<' E               {  $$ = new Manje($1, $3);  delete $1;  delete $3; }
                | E '>' E               {  $$ = new Vece($1, $3);  delete $1;  delete $3;}
                | E '>''=' E            { /*TODO*/ }
                | E '<''=' E            { /*TODO*/ }
                ;
        
        



%%

/* Main funkcija */
int main() {
  yydebug=0;
  return yyparse();
}
