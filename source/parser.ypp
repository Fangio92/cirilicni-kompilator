
%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>
#include <vector>
#include "classes/naredba.hpp"

#define YYDEBUG 1

std::map <std::string, int> id_map;


void yyerror(const char *str) {
    extern int yylineno;

    std::cerr<<"Pojavila se greska: "<< str<<"  u liniji: "<< yylineno<<std::endl;
    exit(EXIT_FAILURE);
} 

map<std::string, int> tablica;

int yylex();

%}
%union{
    std::string *s;
    int x;
    Naredba *n;
    Izraz *i;
    vector<Naredba*> *v;
}

%token  CEO VRATI 

%token<s> ID
%token<x> NUM
%token<bul> AKO ONDA INACE

%start S


%nonassoc '='

%left '<''>' 
%left '+' '-'
%left '*' '/'
%left UMINUS 

%nonassoc ONDA
%nonassoc INACE

%%
S:   S funkcija 
    | funkcija
    ;

funkcija: ID '(' argumenti ')' blok
        ;
        
blok:           '{' niz_naredbi   '}'      {  }
                ;


niz_naredbi:    niz_naredbi ';' naredba    {  }
                | naredba                   {  }
                ;
            
naredba:        ID '=' E                      {  }
                | blok                      {  }
                | uslov
                | poziv_funkcije
                |
                ;
uslov:    AKO E ONDA naredba
        | AKO E ONDA naredba INACE naredba
        ;
        
poziv_funkcije: ID '(' argumenti  ')'
                ;
E :               E '+' E	                {     }
                | E '-' E	            {   }
                | E '*' E           	{  }
                | E '/' E	            {  }
                | '(' E ')'	            {   }
                | '-' E    %prec UMINUS	{  }
                | NUM		            {   }
                | ID                    {  }
                | E '<' E               {   }
                | E '>' E               {  }
                | E '>''=' E            {  }
                | E '<''=' E            {  }
                ;
        
argumenti: argumenti ','  E
        | E
        |
        ;

%%

/* Main funkcija */
int main() {
  yydebug=1;
  return yyparse();
}
