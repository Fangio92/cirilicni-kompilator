
%{
#include<iostream>
#define YYDEBUG 1

void yyerror(const char *str) {
    extern int yylineno;

    std::cerr<<"Pojavila se greska: "<< str<<"  u liniji: "<< yylineno<<std::endl;
    exit(EXIT_FAILURE);
} 

int yylex();

%}
%token ID NUM CEO AKO ONDA VRATI INACE


%start S


%right '='

%left '+' '-'
%left '*' '/'
%left UMINUS 

%nonassoc AKO
%nonassoc INACE

%%
S: niz_funkcija ;

niz_funkcija: niz_funkcija funkcija
            |
            ;
            
funkcija: tip ID lista_argumenata blok;

blok: '{' niz_naredbi '}'
        | '{''}'
    ;

lista_argumenata: '(' niz_argumenata ')'
                ;
                
lista_promenljivih: '(' niz_brojeva ')'
                ;


niz_argumenata: niz_argumenata ',' tip ID 
                |  tip ID
                | 
                ;

niz_naredbi: niz_naredbi naredba 
            | naredba 
            ;
            
naredba: dodela ';'
        | VRATI broj ';'
        | ID lista_promenljivih ';'
        | uslov 
        | tip lista_inicijalizacije ';'
        ;
lista_inicijalizacije: lista_inicijalizacije ',' dodela
        | lista_inicijalizacije ','  ID
        | ID
        | dodela
        |
        ;
        
dodela: ID '=' E
        ;
        
uslov: AKO '(' upit ')' ONDA blok
        | AKO '(' upit ')' ONDA blok INACE blok
        ;
upit: broj '<' broj
    | broj '>' broj
    | broj '>''=' broj
    | broj '<''=' broj
    ;
        
E : E '+' E	{ $$ = $1 + $3; }
  | E '-' E	{ $$ = $1 - $3; }
  | E '*' E	{ $$ = $1 * $3; }
  | E '/' E	{ }
  | '(' E ')'	{ $$ = $2; }
  | '-' E    %prec UMINUS	{ $$ = -$2; }
  | NUM		{ $$ = $1; }
  | ID		
  ;
        
        
tip: CEO
    |
    ;

niz_brojeva: broj
            | niz_brojeva ',' broj 
            |
            ;

broj: ID
    | NUM
    ;

%%

/* Main funkcija */
int main() {
yydebug=1;
  return yyparse();
}
