%{

#include <iostream>
#include <string>
#include <cstdlib>
#include <string>
#include <vector>
#include "ast.hpp"
#define YYDEBUG 1  
using namespace std;
extern LLVMContext TheContext;

int yylex();

void yyerror(string s) {
    cerr << s << endl;
    exit(EXIT_FAILURE);
}

int counter = 0;

Function *PrintfFja;

%}

%union {
double d;
int i;
string *s;
ExprAST *e;
vector<ExprAST*> *v;
vector<TypeAST*> *v1;
PrototypeAST *p;
vector<string > *v2;
pair<string, ExprAST*> *p1;
Type *t;
TypeAST *t2;
}

%token   if_token  else_token   while_token int_token double_token print_token extern_token

%token <s> id_token string_token
%token <d> numD_token
%token <i> numI_token

%type <e> E 
%type <v>  Blok Arguments EArray
%type <v1> Args
%type <p> Potpis
%type <v2> NizInic
%type <t> Tip
%type <t2> TipArg

%left else_token '{'
%left ':'
%right '='
%left '<' '>'
%left '+' '-'
%left '*' '/'


%%
Program: Program Statement 
| Statement  
;
Statement: '@' Potpis '{' Blok  '}' {
    BlockAST *b= new BlockAST(*$4);
    delete $4;
    
    FunctionAST* f = new FunctionAST(*$2, b);
    delete $2;
    
    f->codegen();
    delete f;
}
| extern_token Potpis ';'{
    $2->codegen();
    delete $2;
}

;

Blok: Blok E ';'{ $$=$1; $$->push_back($2); }
    | E ';'     { $$ = new vector<ExprAST*>();
                  $$->push_back($1);    }
    ;
    
    
Potpis: Tip id_token '(' Args ')' {
    $$ = new PrototypeAST($1, *$2, *$4);
    delete $2;
    delete $4;
}
;
Tip: int_token     { $$= Type::getInt32Ty(TheContext); }
    | double_token { $$=Type::getDoubleTy(TheContext); }
    ;

Args: Args ',' TipArg { $$ = $1; $$->push_back($3); }
    | TipArg          { $$ = new vector<TypeAST*>(); $$->push_back($1); }
    |                 { $$ = new vector<TypeAST*>();  }
    ;

TipArg:   double_token id_token     { $$ = new TypeAST(Type::getDoubleTy(TheContext), *$2);  delete $2; }
        | int_token id_token        { $$ = new TypeAST(Type::getInt32Ty(TheContext), *$2);  delete $2; }
        ;

E: E '+' E {
    $$ = new AddExprAST($1, $3);
}
| E '-' E {
    $$ = new SubExprAST($1, $3);
}
| E '*' E {
    $$ = new MulExprAST($1, $3);
}
| E '/' E {
    $$ = new DivExprAST($1, $3);
}
| E '<' E {
    $$ = new LTExprAST($1, $3);
}
| E '>' E {
    $$ = new GTExprAST($1, $3);
}
| E ':' E {
    $$ = new SeqExprAST($1, $3);
}
| id_token '=' E {
    $$ = new AssignExprAST(*$1, $3);
    delete $1;
}
| '(' E ')' {
    $$ = $2;
}
| '-' E {
    $$ = new SubExprAST(new NumberIExprAST(0), $2);
}
| numD_token {
    $$ = new NumberDExprAST($1);
}
| numI_token {
    $$ = new NumberIExprAST($1);
}
| id_token {
    $$ = new VariableExprAST(*$1);
    delete $1;
}
| if_token E '{' Blok '}' else_token  '{' Blok '}' {
    BlockAST *b1= new BlockAST(*$4);
    BlockAST *b2= new BlockAST(*$8);

    $$ = new IfExprAST($2, b1, b2);
    
    delete $4;
    delete $8;
}
| if_token E '{' Blok '}'{
    BlockAST *b1= new BlockAST(*$4);
    $$ = new IfExprAST($2, b1, new NumberIExprAST(0));
    
    delete $4;
}
| while_token E '{' Blok '}' {
    BlockAST *b= new BlockAST(*$4);
    $$ = new WhileAST($2, b);
    
    delete $4;
}
| id_token '(' Arguments ')' {
    $$ = new CallExprAST(*$1, *$3);
    
    delete $1;
    delete $3;
  }
| int_token NizInic{
    $$ = new Declaration(Type::getInt32Ty(TheContext) , *$2);
    delete $2;
}

| double_token NizInic{
    $$ = new Declaration(Type::getDoubleTy(TheContext), *$2);
    delete $2;
}
| print_token '(' E ')'{
    $$ = new PrintAST($3);
}
;


NizInic: NizInic ',' id_token {
    $$ = $1;
    $$->push_back(*$3);
    delete $3;
}
| id_token {
    $$ = new vector<string>();
    $$->push_back(*$1);
    delete $1;
}
;


Arguments: EArray {
    $$ = $1;
}
| {
    $$ = new vector<ExprAST*>();
}
;
EArray: EArray ',' E {
    $$ = $1;
    $$->push_back($3);
}
| E {
    $$ = new vector<ExprAST*>();
    $$->push_back($1);
}
;

%%


extern Module* TheModule;
extern IRBuilder<> Builder;

int mode;
extern FILE* yyin;

int main(int argc, char **argv) {
    // yydebug = 1;
    if (argc > 1) {
        if (string(argv[1]) == string("--llvm"))
            mode = 1;
        else if (string(argv[1]) == string("--compile"))
            mode = 2;
    }
    yyin = fopen(argc == 2 ? argv[1] : argv[2], "r");
    
    if (yyin == NULL)
        yyerror("Nemoguce otvaranje fajla");

  
    InitializeModuleAndPassManager();

    FunctionType *FT1 = FunctionType::get(IntegerType::getInt32Ty(TheContext), PointerType::get(Type::getInt8Ty(TheContext), 0), true);
    PrintfFja = Function::Create(FT1, Function::ExternalLinkage, "printf", TheModule);
        
    yyparse();
    
    if (mode == 1) {
        TheModule->dump();
    }
    else if (mode == 2) {
        string TargetTriple = "x86_64-pc-linux-gnu";
        LLVMInitializeAllTargetInfos();
        LLVMInitializeAllTargets();
        LLVMInitializeAllTargetMCs();
        LLVMInitializeAllAsmParsers();
        LLVMInitializeAllAsmPrinters();
    
        string Error;
        auto Target = TargetRegistry::lookupTarget(TargetTriple, Error);  
    
        if (!Target) {
            cerr << Error;
            return 1;
        }
    
        auto CPU = "generic";
        auto Features = "";
    
        TargetOptions opt;
        auto RM = Reloc::Model();
        auto TargetMachine = Target->createTargetMachine(TargetTriple, CPU, Features, opt, RM);
        
        TheModule->setDataLayout(TargetMachine->createDataLayout());
        TheModule->setTargetTriple(TargetTriple);
        
        string Filename = "output.o";
        error_code EC;
        raw_fd_ostream dest(Filename, EC, sys::fs::F_None);
        
        if (EC) {
            cerr << "Could not open file: " << EC.message();
            return 1;
        }
    
        legacy::PassManager pass;
        auto FileType = TargetMachine::CGFT_ObjectFile;
    
        if (TargetMachine->addPassesToEmitFile(pass, dest, FileType)) {
            cerr << "TargetMachine can't emit a file of this type";
            return 1;
        }
    
        pass.run(*TheModule);
        dest.flush();  
    }
  
    delete TheModule;
    return 0;
}

